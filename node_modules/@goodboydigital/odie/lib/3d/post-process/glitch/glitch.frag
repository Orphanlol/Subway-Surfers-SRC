export default "varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform sampler2D uMap;\n\nuniform vec2 uCenter;\nuniform float uTime;\nuniform vec2 uResolution;\nuniform float uRadius;\n\nfloat random(vec3 scale,float seed){return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453+seed);}\n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec3 permute(vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0))/6.0\n    0.366025403784439, // 0.5*(sqrt(3.0)-1.0)\n    -0.577350269189626, // -1.0 + 2.0 * C.x\n    0.024390243902439); // 1.0 / 41.0\n    \n    // First corner\n    vec2 i = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    \n    // Other corners\n    \n    vec2 i1;\n\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    \n    // Permutations\n    \n    i = mod289(i); // Avoid truncation effects in permutation\n    \n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    \n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    \n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n    \n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    \n    // Normalise gradients implicitly by scaling m\n    \n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    \n    // Compute final noise value at P\n    \n    vec3 g;\n    g.x = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nvec2 diffUv(vec2 offset, float power) {\n   \n   return vTextureCoord + ((offset / uResolution) * power);\n}\n\nvec2 pixelate(vec2 coord, vec2 size) {\n    return floor( coord / size ) * size;\n}\n\nvoid main() {\n    float power = 7.0;\n    vec2 uv_r = diffUv(vec2(0, 1), power);\n    vec2 uv_g =  diffUv(vec2(1, 0), power);\n    vec2 uv_b =  diffUv(vec2(0, 0), power);\n\n\t\n    float r = texture2D(uSampler, uv_r).r;\n    float g = texture2D(uSampler, uv_g).g;\n    float b = texture2D(uSampler, uv_b).b;\n    vec4 split = vec4(r, g, b, 1.0);\n\n    vec2 pixelated = pixelate(vTextureCoord, vec2(.01) );\n    vec4 pixel =  texture2D(uSampler, pixelated);\n        \n    gl_FragColor = mix(split, pixel, 0.3);\n}\n"