var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { SoundInstance } from '../SoundInstance';
import { Howl } from 'howler';
var HowlerSoundInstance = /** @class */ (function (_super) {
    __extends(HowlerSoundInstance, _super);
    function HowlerSoundInstance(id, baseVolume, howl, options) {
        var _this = _super.call(this, id, baseVolume) || this;
        _this.howl = howl;
        _this.uid = howl.play();
        _this.pause();
        _this.postConstructor(options);
        return _this;
    }
    Object.defineProperty(HowlerSoundInstance.prototype, "panning", {
        set: function (value) {
            this.howl.stereo(value, this.uid);
        },
        enumerable: true,
        configurable: true
    });
    HowlerSoundInstance.prototype._seek = function (seconds) {
        this.howl.seek(seconds * 1000, this.uid);
    };
    HowlerSoundInstance.prototype._setCalculatedVolume = function (value) {
        this.howl.volume(value, this.uid);
    };
    HowlerSoundInstance.prototype._setCalculatedRate = function (value) {
        this.howl.rate(value, this.uid);
    };
    HowlerSoundInstance.prototype._pause = function () {
        this.howl.pause(this.uid);
    };
    HowlerSoundInstance.prototype._resume = function () {
        this.howl.play(this.uid);
    };
    HowlerSoundInstance.prototype._stop = function () {
        this.howl.stop(this.uid);
    };
    HowlerSoundInstance.prototype._addListeners = function () {
        this.howl.on('end', this.boundOnCompleteHandler, this.uid);
    };
    HowlerSoundInstance.prototype._removeListeners = function () {
        this.howl.off('end', this.boundOnCompleteHandler, this.uid);
    };
    Object.defineProperty(HowlerSoundInstance.prototype, "rawObject", {
        get: function () {
            return {
                id: this.uid,
                howl: this.howl,
            };
        },
        enumerable: true,
        configurable: true
    });
    return HowlerSoundInstance;
}(SoundInstance));
export { HowlerSoundInstance };
var HowlerSoundFactory = /** @class */ (function () {
    function HowlerSoundFactory() {
        this.soundsById = new Map();
    }
    HowlerSoundFactory.prototype.registerSound = function (options) {
        var howl = new Howl({
            src: options.src,
            preload: options.preload,
            html5: options.stream,
            autoplay: false,
            volume: 0,
        });
        this.soundsById.set(options.id, howl);
    };
    HowlerSoundFactory.prototype.factorySoundInstance = function (id, baseVolume, instanceOptions) {
        if (instanceOptions === void 0) { instanceOptions = {}; }
        var howl = this.soundsById.get(id);
        if (!howl) {
            console.warn("no sound for " + id);
            return null;
        }
        if (howl.state() === 'unloaded') {
            howl.load();
        }
        return new HowlerSoundInstance(id, baseVolume, howl, instanceOptions);
    };
    return HowlerSoundFactory;
}());
export { HowlerSoundFactory };
