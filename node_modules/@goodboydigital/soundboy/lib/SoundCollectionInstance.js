var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { SoundInstance } from './SoundInstance';
import SoundBoy from './SoundBoy';
/**
 * A SoundInstance that under the hood plays one or more sounds in sequence from a SoundCollection data object.
 * Its behaviour should be indistinguishable from that of a normal SoundInstance, the only limitation being that
 * seeking will not work, unless used to restart the sound instance from the beginning.
 */
var SoundCollectionInstance = /** @class */ (function (_super) {
    __extends(SoundCollectionInstance, _super);
    function SoundCollectionInstance(id, collection, channel, options) {
        var _this = _super.call(this, id) || this;
        _this.currentIndex = -1;
        _this.collection = collection;
        _this.channel = channel;
        _this.currentOptions = Object.assign({}, options);
        _this.currentOptions.loops = 1;
        _this.postConstructor(options);
        _this._initFromCollection();
        _this._playNext();
        return _this;
    }
    /**
     * resets current index and refreshes ids to play from collection data
     */
    SoundCollectionInstance.prototype._initFromCollection = function () {
        this.currentIndex = -1;
        this.ids = this.collection.getSequence();
    };
    SoundCollectionInstance.prototype._playNext = function () {
        var _this = this;
        this.currentIndex++;
        this.currentOptions.callback = this.currentIndex < this.ids.length - 1
            ? function () { return _this._playNext(); }
            : function () {
                if (_this.hasLoopsRemaining)
                    _this._initFromCollection();
                _this._onCompleteHandler();
            };
        this.currentOptions.volume = this.volume;
        this.currentSoundInstance = SoundBoy.playOnChannel(this.ids[this.currentIndex], this.channel, this.currentOptions);
    };
    Object.defineProperty(SoundCollectionInstance.prototype, "volume", {
        get: function () {
            return this.currentOptions.volume;
        },
        set: function (value) {
            if (value === this.currentOptions.volume)
                return;
            this.currentOptions.volume = value;
            if (this.currentSoundInstance)
                this.currentSoundInstance.volume = value;
        },
        enumerable: true,
        configurable: true
    });
    SoundCollectionInstance.prototype._setCalculatedVolume = function () {
        // do nothing, currentSoundInstance will take care of everything
    };
    SoundCollectionInstance.prototype._setCalculatedRate = function () {
        // do nothing, currentSoundInstance will take care of everything
    };
    SoundCollectionInstance.prototype._pause = function () {
        this.currentSoundInstance.pause();
    };
    SoundCollectionInstance.prototype._resume = function () {
        this.currentSoundInstance.resume();
    };
    SoundCollectionInstance.prototype._stop = function () {
        this.currentSoundInstance.stop();
    };
    SoundCollectionInstance.prototype._seek = function (seconds) {
        // restart and seeking to 0 will work
        if (seconds === 0) {
            this.currentSoundInstance.stop();
            this.currentIndex = -1;
            this._playNext();
        }
        else {
            throw new Error('SoundBoy : SoundCollectionInstance : cannot seek in a SoundCollectionInstance');
        }
    };
    SoundCollectionInstance.prototype._addListeners = function () {
        // nothing to do, everything handled in callback
    };
    SoundCollectionInstance.prototype._removeListeners = function () {
        // nothing to do, everything handled in callback
    };
    Object.defineProperty(SoundCollectionInstance.prototype, "panning", {
        get: function () {
            return this.currentOptions.panning;
        },
        set: function (value) {
            this.currentOptions.panning = value;
            if (this.currentSoundInstance)
                this.currentSoundInstance.panning = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundCollectionInstance.prototype, "rate", {
        get: function () {
            return this.currentOptions.rate;
        },
        set: function (value) {
            this.currentOptions.rate = value;
            if (this.currentSoundInstance)
                this.currentSoundInstance.rate = value;
        },
        enumerable: true,
        configurable: true
    });
    return SoundCollectionInstance;
}(SoundInstance));
export { SoundCollectionInstance };
